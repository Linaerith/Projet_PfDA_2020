from rest_framework import serializers
from prediction.models import Event_Log

class EventSerializer(serializers.Serializer):
    active = serializers.FloatField()
    reassignment_count = serializers.FloatField()
    reopen_count = serializers.FloatField()
    sys_mod_count = serializers.FloatField()
    made_sla = serializers.FloatField()
    knowledge = serializers.FloatField()
    u_priority_confirmation = serializers.FloatField()
    sys_updated_by = serializers.FloatField()
    category = serializers.FloatField()
    subcategory = serializers.FloatField()
    u_symptom = serializers.FloatField()
    impact = serializers.FloatField()
    urgency = serializers.FloatField()
    contact_type_Direct_opening = serializers.FloatField()
    contact_type_Email = serializers.FloatField()
    contact_type_IVR = serializers.FloatField()
    contact_type_Phone = serializers.FloatField()
    contact_type_Self_service = serializers.FloatField()
    incident_state_100 = serializers.FloatField()
    incident_state_Active = serializers.FloatField()
    incident_state_Awaiting_Evidence = serializers.FloatField()
    incident_state_Awaiting_Problem = serializers.FloatField()
    incident_state_Awaiting_User_Info = serializers.FloatField()
    incident_state_Awaiting_Vendor = serializers.FloatField()
    incident_state_Closed = serializers.FloatField()
    incident_state_New = serializers.FloatField()
    incident_state_Resolved = serializers.FloatField()
    isoWeekDay_1 = serializers.FloatField()
    isoWeekDay_2 = serializers.FloatField()
    isoWeekDay_3 = serializers.FloatField()
    isoWeekDay_4 = serializers.FloatField()
    isoWeekDay_5 = serializers.FloatField()
    isoWeekDay_6 = serializers.FloatField()
    isoWeekDay_7 = serializers.FloatField()
    hour = serializers.FloatField()
    month = serializers.FloatField()
    priority = serializers.FloatField()
    time_before_resolution = serializers.FloatField(allow_null=True)
    def create(self, validated_data):
        """Create and return a new `House` instance, given the validated data."""
        return Event_Log.objects.create(**validated_data)
    def update(self, instance, validated_data):
        """"Update and return an existing `House` instance, given the validated data."""
        instance.active = validated_data.get('active' , instance.active )
        instance.reassignment_count = validated_data.get('reassignment_count' , instance.reassignment_count )
        instance.reopen_count = validated_data.get('reopen_count' , instance.reopen_count )
        instance.sys_mod_count = validated_data.get('sys_mod_count' , instance.sys_mod_count )
        instance.made_sla = validated_data.get('made_sla' , instance.made_sla )
        instance.knowledge = validated_data.get('knowledge' , instance.knowledge)
        instance.u_priority_confirmation = validated_data.get('u_priority_confirmation' , instance.u_priority_confirmation )
        instance.sys_updated_by = validated_data.get('sys_updated_by' , instance.sys_updated_by )
        instance.category = validated_data.get('category' , instance.category )
        instance.subcategory = validated_data.get('subcategory' , instance.subcategory )
        instance.u_symptom = validated_data.get('u_symptom' , instance.u_symptom )
        instance.impact = validated_data.get('impact' , instance.impact )
        instance.urgency = validated_data.get('urgency' , instance.urgency )
        instance.contact_type_Direct_opening = validated_data.get('contact_type_Direct_opening' , instance.contact_type_Direct_opening )
        instance.contact_type_Email = validated_data.get('contact_type_Email' , instance.contact_type_Email )
        instance.contact_type_IVR = validated_data.get('contact_type_IVR' , instance.contact_type_IVR )
        instance.contact_type_Phone = validated_data.get('contact_type_Phone' , instance.contact_type_Phone )
        instance.contact_type_Self_service = validated_data.get('contact_type_Self_service' , instance.contact_type_Self_service )
        instance.incident_state_100 = validated_data.get('incident_state_100' , instance.incident_state_100)
        instance.incident_state_Active = validated_data.get('incident_state_Active' , instance.incident_state_Active )
        instance.incident_state_Awaiting_Evidence = validated_data.get('incident_state_Awaiting_Evidence' , instance.incident_state_Awaiting_Evidence )
        instance.incident_state_Awaiting_Problem = validated_data.get('incident_state_Awaiting_Problem' , instance.incident_state_Awaiting_Problem )
        instance.incident_state_Awaiting_User_Info = validated_data.get('incident_state_Awaiting_User_Info' , instance.incident_state_Awaiting_User_Info )
        instance.incident_state_Awaiting_Vendor = validated_data.get('incident_state_Awaiting_Vendor' , instance.incident_state_Awaiting_Vendor )
        instance.incident_state_Closed = validated_data.get('incident_state_Closed' , instance.incident_state_Closed )
        instance.incident_state_New = validated_data.get('incident_state_New' , instance.incident_state_New )
        instance.incident_state_Resolved = validated_data.get('incident_state_Resolved' , instance.incident_state_Resolved )
        instance.isoWeekDay_1 = validated_data.get('isoWeekDay_1' , instance.isoWeekDay_1 )
        instance.isoWeekDay_2 = validated_data.get('isoWeekDay_2' , instance.isoWeekDay_2)
        instance.isoWeekDay_3 = validated_data.get('isoWeekDay_3' , instance.isoWeekDay_3 )
        instance.isoWeekDay_4 = validated_data.get('isoWeekDay_4' , instance.isoWeekDay_4 )
        instance.isoWeekDay_5 = validated_data.get('isoWeekDay_5' , instance.isoWeekDay_5 )
        instance.isoWeekDay_6 = validated_data.get('isoWeekDay_6' , instance.isoWeekDay_6 )
        instance.isoWeekDay_7 = validated_data.get('isoWeekDay_7' , instance.isoWeekDay_7 )
        instance.hour = validated_data.get('hour' , instance.hour )
        instance.month = validated_data.get('month' , instance.month )
        instance.priority = validated_data.get('priority' , instance.priority )
        instance.save()
        return instance
